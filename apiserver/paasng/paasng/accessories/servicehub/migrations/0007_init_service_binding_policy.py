# -*- coding: utf-8 -*-
# TencentBlueKing is pleased to support the open source community by making
# 蓝鲸智云 - PaaS 平台 (BlueKing - PaaS System) available.
# Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# We undertake not to change the open source license (MIT license) applicable
# to the current version of the project delivered to anyone in the future.

# Generated by Django 4.2.16 on 2025-01-03 08:41
import logging

from django.db import migrations

from paasng.accessories.servicehub.manager import mixed_service_mgr
from paasng.accessories.servicehub.binding_policy.manager import ServiceBindingPolicyManager

logger = logging.getLogger(__name__)


def init_service_binding_policy(apps, schema_editor):
    """
    Initialize the service binding policy for all services.

    Background:
    This migration is part of the transition from an implicit service binding scheme
    to an explicit one using ServiceBindingPolicy and ServiceBindingPrecedencePolicy.
    Previously, service plans were implicitly bound to services. This migration aims
    to establish explicit binding policies using existing plan data.

    Purpose:
    The goal is to create BindingPolicy models to replace the old implicit binding
    scheme. By leveraging existing plan data, we ensure that services are correctly
    configured with explicit binding policies, enhancing clarity and maintainability.

    Applicable Scenarios:
    This migration is applicable when transitioning from the old implicit binding
    scheme to the new explicit binding policy model. It should be run when no
    ServiceBindingPolicy or ServiceBindingPrecedencePolicy records exist, ensuring
    a clean initialization.

    Special Considerations:
    - The migration will skip initialization if any binding policies already exist,
      to prevent overwriting existing configurations.
    - Existing plans will not be automatically filtered by environment or cluster.
      Users will need to manually select plans when creating service bindings.
    """
    ServiceBindingPolicy = apps.get_model('servicehub', 'ServiceBindingPolicy')
    ServiceBindingPrecedencePolicy = apps.get_model('servicehub', 'ServiceBindingPrecedencePolicy')

    # Check if either policy already exists
    if ServiceBindingPolicy.objects.exists() or ServiceBindingPrecedencePolicy.objects.exists():
        logger.info("Service binding policy already exists, skip init")
        return

    for service in mixed_service_mgr.list():
        logger.info("Init service(%s) binding policy for service", service.name)
        plans = service.get_plans()
        ServiceBindingPolicyManager(service).set_static(plans)
        logger.info("Service(%s) binding policy init done", service.name)


class Migration(migrations.Migration):
    dependencies = [
        ('servicehub', '0006_unboundserviceengineappattachment_and_more'),
    ]

    operations = [
        migrations.RunPython(init_service_binding_policy),
    ]
