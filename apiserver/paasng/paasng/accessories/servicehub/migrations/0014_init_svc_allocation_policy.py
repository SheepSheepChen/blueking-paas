# Generated by Django 4.2.17 on 2025-05-26 11:34

from django.conf import settings
from django.db import migrations
from django.db.models import Min
from django.utils import translation

from paasng.accessories.servicehub.binding_policy.policy import get_service_type
from paasng.accessories.servicehub.constants import (
    PrecedencePolicyCondType,
    ServiceAllocationPolicyType,
    ServiceBindingPolicyType,
)
from paasng.accessories.servicehub.manager import mixed_service_mgr


def init_service_allocation_policies(apps, schema_editor):
    """
    初始化 ServiceAllocationPolicy.

    背景:
    ServiceBindingPrecedencePolicy 本身用于带条件匹配，ServiceBindingPolicy 用于无条件匹配，作为兜底策略。
    本次修改后，ServiceBindingPrecedencePolicy 用于规则匹配，使用类型为 "AlwaysMatch" 作为兜底策略。
    ServiceBindingPolicy 用于统一分配。
    并且添加了模型 ServiceAllocationPolicy 存储和判断分配策略（规则匹配/统一分配）
    目的:
    - 将带条件匹配 ServiceBindingPolicy 兜底策略转换为 always_match ServiceBindingPrecedencePolicy
    - 为带条件匹配创建 rule_based 类型的 ServiceAllocationPolicy
    - 根据孤立的 ServiceBindingPolicy 创建 uniform 类型的 ServiceAllocationPolicy
    """

    ServiceBindingPolicy = apps.get_model('servicehub', 'ServiceBindingPolicy')
    ServiceBindingPrecedencePolicy = apps.get_model('servicehub', 'ServiceBindingPrecedencePolicy')
    ServiceAllocationPolicy = apps.get_model('servicehub', 'ServiceAllocationPolicy')

    processed_pairs = set()
    for precedence_policy in ServiceBindingPrecedencePolicy.objects.all():
        service_id = precedence_policy.service_id
        tenant_id = precedence_policy.tenant_id
        # 若处理过则跳过
        if (service_id, tenant_id) in processed_pairs:
            continue
        processed_pairs.add((service_id, tenant_id))

        # mixed_service_mgr 会调用 django.utils.translation.get_language()
        # 虽然配置了 settings.LANGUAGE_CODE 但是必须在国际化中间件 LocaleMiddleware 调用后才会有值
        with translation.override(settings.LANGUAGE_CODE):
            service_obj = mixed_service_mgr.get(uuid=service_id)
        policy = ServiceBindingPolicy.objects.get(
            service_id=service_id,
            tenant_id=tenant_id,
        )
        plans = policy.data
        # 获取最小 priority
        min_priority = ServiceBindingPrecedencePolicy.objects.filter(
            service_id=service_id,
            tenant_id=tenant_id
        ).aggregate(Min('priority'))['priority__min']
        # 转换为 ServiceBindingPrecedencePolicy，即创建 always_match ServiceBindingPrecedencePolicy
        if policy.type == ServiceBindingPolicyType.STATIC.value:
            precedence_policy_type = ServiceBindingPolicyType.STATIC.value,
        elif policy.type == ServiceBindingPolicyType.ENV_SPECIFIC.value:
            precedence_policy_type = ServiceBindingPolicyType.ENV_SPECIFIC.value,
        else:
            raise ValueError("Invalid ServiceBindingPolicy type")

        ServiceBindingPrecedencePolicy.objects.create(
            service_id=precedence_policy.service_id,
            service_type=get_service_type(service_obj),
            tenant_id=precedence_policy.tenant_id,
            priority=min_priority - 1,
            cond_type=PrecedencePolicyCondType.ALWAYS_MATCH.value,
            cond_data={},
            type=precedence_policy_type,
            data=plans,
        )
        # 删除 ServiceBindingPolicy
        policy.delete()
        # 创建 rule_based ServiceAllocationPolicy
        ServiceAllocationPolicy.objects.create(
            service_id=precedence_policy.service_id,
            tenant_id=precedence_policy.tenant_id,
            type=ServiceAllocationPolicyType.RULE_BASED.value,
        )

    # 根据孤立的 ServiceBindingPolicy 创建 uniform 类型的 ServiceAllocationPolicy
    for binding_policy in ServiceBindingPolicy.objects.all():
        ServiceAllocationPolicy.objects.create(
            service_id=binding_policy.service_id,
            tenant_id=binding_policy.tenant_id,
            type=ServiceAllocationPolicyType.UNIFORM.value,
        )


class Migration(migrations.Migration):
    dependencies = [
        ('servicehub', '0013_serviceallocationpolicy'),
    ]

    operations = [
        migrations.RunPython(init_service_allocation_policies),
    ]
