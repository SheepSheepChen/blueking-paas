# Generated by Django 4.2.17 on 2025-05-22 12:04

from django.db import migrations

from paasng.accessories.servicehub.constants import ServiceAllocationPolicyType


def init_service_allocation_policies(apps, schema_editor):
    """
    初始化 ServiceAllocationPolicy.

    背景:
    ServiceBindingPrecedencePolicy 本身用于带条件匹配，ServiceBindingPolicy 用于无条件匹配，作为兜底策略。
    本次修改后，ServiceBindingPrecedencePolicy 用于规则匹配，使用类型为 "AlwaysMatch" 作为兜底策略。
    ServiceBindingPolicy 用于统一分配。
    并且添加了模型 ServiceAllocationPolicy 存储和判断分配策略（规则匹配/统一分配），所有的分配策略都以
    ServiceAllocationPolicy 对象为入口。

    目的:
    - 为 ServiceBindingPolicy 绑定 ServiceAllocationPolicy，实现统一分配初始化

    特殊场景:
    - 大多数场景都是统一分配，该 migration 不处理带条件匹配的情况。若有存量场景为带条件匹配，则需要手动处理。
    """

    ServiceBindingPolicy = apps.get_model('servicehub', 'ServiceBindingPolicy')
    ServiceAllocationPolicy = apps.get_model('servicehub', 'ServiceAllocationPolicy')

    for binding_policy in ServiceBindingPolicy.objects.filter(allocation_policy__isnull=False):
        allocation_policy = ServiceAllocationPolicy.objects.create(
            service_id=binding_policy.service_id,
            tenant_id=binding_policy.tenant_id,
            type=ServiceAllocationPolicyType.UNIFORM.value,
        )
        binding_policy.allocation_policy = allocation_policy
        binding_policy.save(update_fields=["allocation_policy", "updated"])


class Migration(migrations.Migration):
    dependencies = [
        ('servicehub', '0013_serviceallocationpolicy_and_more'),
    ]

    operations = [
        migrations.RunPython(init_service_allocation_policies),
    ]
